@page "/notifications"
@rendermode InteractiveServer
@using AccountUI.Components.Layout
@using AccountUI.Models
@using Microsoft.AspNetCore.Http
@inject NavigationManager Navigation
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authentication
@inject IHttpContextAccessor httpContextAccessor
@inject HttpClient Http
@inject IConfiguration configuration

<PageTitle>Silicon - Notifications</PageTitle>
<AccountLayout>
    <div class="account-notifications">
        @if (formSubmitted)
        {
            <div class="alert alert-success">
                Saving succeeded!
            </div>
        }
        else if (formInvalid)
        {
            <div class="alert alert-danger">
                Make sure you've entered all required fields!
            </div>
        }
        <EditForm FormName="notificationsform" Model="notificationsDetails" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit" id="notifications-form" method="post" novalidate>
            <DataAnnotationsValidator />

            <h1>Notifications</h1>
            <div class="form-content">
                <div class="input-group">
                    <label for="Notifications-Details">Preferred email for notifications*</label>
                    <InputText id="Notifications-Details" @bind-Value="notificationsDetails.Email" placeholder="Enter your email address.." />
                    <ValidationMessage For="@(() => notificationsDetails.Email)" class="validation-message" />
                </div>
                <div class="input-group switch-group">
                    <label class="switch">
                        <InputCheckbox @bind-Value="notificationsDetails.IsActive" />
                        <span class="slider round"></span>
                    </label>
                    <span class="subscribeNewsletter">Subscribe to Newsletter</span>
                   
                </div>


                <div class="button-box">
                    <button type="button" class="btn-gray" @onclick="RedirectToAccountDetails">Cancel</button>
                    <button type="submit" class="btn-theme">Save changes</button>
                </div>

            </div>
            
        </EditForm>

    </div>

</AccountLayout>


@code {


    private NotificationsFormModel notificationsDetails = new();
    private bool formSubmitted = false;
    private bool formInvalid = false;
    private string? notificationsApiUrl;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            notificationsApiUrl = configuration["API:Notifications"]!;
            var token = await httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            notificationsDetails = await Http.GetFromJsonAsync<NotificationsFormModel>($"{notificationsApiUrl}/user") ?? new NotificationsFormModel();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Exception in OnInitializedAsync: {e.Message}");
            notificationsDetails = new NotificationsFormModel();
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Valid submission triggered");

        var hasNotifications = !string.IsNullOrEmpty(notificationsDetails?.UserId) && notificationsDetails?.UserId?.Length > 5;
        bool ok;
        if (hasNotifications)
        {
            ok = await UpdateNotifications();
        }
        else
        {
            ok = await CreateNotifications();
            Navigation.NavigateTo("/notifications", forceLoad: true);

        }

        formSubmitted = ok;
        Console.WriteLine($"Operation successful: {ok}");
    }

    private async Task<bool> UpdateNotifications()
    {
        try
        {
            var token = await httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await Http.PutAsJsonAsync($"{notificationsApiUrl}/{notificationsDetails.UserId}", notificationsDetails);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("UpdateNotifications successful");
                return true;
            }
            else
            {
                Console.WriteLine($"UpdateNotifications failed: {response.ReasonPhrase}");
                Console.WriteLine($"Response StatusCode: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in UpdateNotifications: {ex.Message}");
        }

        return false;
    }

    private async Task<bool> CreateNotifications()
    {
        try
        {
            var token = await httpContextAccessor.HttpContext.GetTokenAsync("access_token");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await Http.PostAsJsonAsync("https://localhost:7076/api/notifications", notificationsDetails);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("CreateNotifications successful");

                
                return true;
                
            }
            else
            {
                Console.WriteLine($"CreateNotifications failed: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in CreateNotifications: {ex.Message}");
        }

        return false;
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Invalid submission triggered");
        formInvalid = true;
        formSubmitted = false;

    }

    private void RedirectToAccountDetails()
    {
        Navigation.NavigateTo("/account-details");
    }

    

}